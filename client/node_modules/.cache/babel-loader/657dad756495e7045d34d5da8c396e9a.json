{"ast":null,"code":"import _slicedToArray from \"/Users/yakiniarumugakani/Documents/Homework/Google-Book-Search/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/yakiniarumugakani/Documents/Homework/Google-Book-Search/client/src/pages/Books.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport TextBox from \"../components/TextBox\";\nimport SearchForm from \"../components/SearchForm\";\nimport API from \"../utils/API\";\n\nfunction Books() {\n  // Initialize books as an empty array\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      books = _useState2[0],\n      setBooks = _useState2[1];\n\n  var titleRef = useRef();\n  var authorRef = useRef();\n  var synopsisRef = useRef();\n  useEffect(() => {\n    loadBooks();\n  }, []);\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    API.getDogsOfBreed(this.state.search).then(res => {\n      if (res.data.status === \"error\") {\n        throw new Error(res.data.message);\n      }\n\n      this.setState({\n        results: res.data.message,\n        error: \"\"\n      });\n    }).catch(err => this.setState({\n      error: err.message\n    }));\n  };\n\n  function loadBooks() {\n    // Add code here to get all books from the database and store them using setBooks\n    API.getBooks().then(response => {\n      setBooks(response.data);\n    });\n  }\n\n  function deleteBooks(id) {\n    // Add code here to get all books from the database and store them using setBooks\n    API.deleteBook(id).then(response => {\n      loadBooks();\n    });\n  }\n\n  function saveBook() {\n    // Add code here to get all books from the database and store them using setBooks\n    var bookData = {\n      title: titleRef.current.value,\n      author: authorRef.current.value,\n      synopsis: synopsisRef.current.value\n    };\n    API.saveBook(bookData).then(response => {\n      setBooks(response.data);\n      alert();\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }, \"Search for books\")), /*#__PURE__*/React.createElement(SearchForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    size: \"md-6 sm-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, \"Books On My List\")), books.length ? /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, books.map(book => /*#__PURE__*/React.createElement(ListItem, {\n    key: book._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"/books/\" + book._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 23\n    }\n  }, book.title, \" by \", book.author)), /*#__PURE__*/React.createElement(DeleteBtn, {\n    onClick: () => deleteBooks(book._id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }\n  })))) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 15\n    }\n  }, \"No Results to Display\"))));\n}\n\nexport default Books;","map":{"version":3,"sources":["/Users/yakiniarumugakani/Documents/Homework/Google-Book-Search/client/src/pages/Books.js"],"names":["React","useState","useEffect","useRef","Jumbotron","DeleteBtn","Col","Row","Container","List","ListItem","TextBox","SearchForm","API","Books","books","setBooks","titleRef","authorRef","synopsisRef","loadBooks","handleFormSubmit","event","preventDefault","getDogsOfBreed","state","search","then","res","data","status","Error","message","setState","results","error","catch","err","getBooks","response","deleteBooks","id","deleteBook","saveBook","bookData","title","current","value","author","synopsis","alert","length","map","book","_id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport TextBox from \"../components/TextBox\";\nimport SearchForm from \"../components/SearchForm\";\n\nimport API from \"../utils/API\"\n\nfunction Books() {\n  // Initialize books as an empty array\n    const [books, setBooks] = useState([]);\n    const titleRef = useRef();\n    const authorRef = useRef();\n    const synopsisRef =useRef();\n    \n    useEffect(() => {\n      loadBooks();\n    }, []);\n\n    handleFormSubmit = event => {\n      event.preventDefault();\n      API.getDogsOfBreed(this.state.search)\n        .then(res => {\n          if (res.data.status === \"error\") {\n            throw new Error(res.data.message);\n          }\n          this.setState({ results: res.data.message, error: \"\" });\n        })\n        .catch(err => this.setState({ error: err.message }));\n    };\n\n    function loadBooks() {\n      // Add code here to get all books from the database and store them using setBooks\n   \n      API.getBooks().then((response) => {\n        setBooks(response.data);\n      });\n  \n    }\n\n    function deleteBooks(id) {\n      // Add code here to get all books from the database and store them using setBooks\n   \n      API.deleteBook(id).then((response) => {\n        loadBooks();\n      });\n  \n    }\n\n    function saveBook() {\n      // Add code here to get all books from the database and store them using setBooks\n    const bookData = {\n         title : titleRef.current.value,\n         author : authorRef.current.value,\n         synopsis : synopsisRef.current.value\n    }\n      API.saveBook(bookData).then((response) => {\n        setBooks(response.data);\n       alert()\n      });\n  \n    }\n\n    return (\n      <Container fluid>\n        <Row>\n          <Col size=\"md-6\">\n            <Jumbotron>\n              <h1>Search for books</h1>\n            </Jumbotron>\n            {/* <form>\n              <Input name=\"title\" placeholder=\"Title (required)\" inputarea= {titleRef}/>\n              <Input name=\"author\" placeholder=\"Author (required)\" inputarea= {authorRef}/>\n              <TextArea name=\"synopsis\" placeholder=\"Synopsis (Optional)\" textarea={synopsisRef}/>\n              <FormBtn onClick={() => saveBook()}>Submit Book </FormBtn>\n            </form > */}\n            <SearchForm>\n\n\n            </SearchForm>\n          </Col>\n          <Col size=\"md-6 sm-12\">\n            <Jumbotron>\n              <h1>Books On My List</h1>\n            </Jumbotron>\n            {books.length ? (\n              <List>\n                {books.map(book => (\n                  <ListItem key={book._id}>\n                    <a href={\"/books/\" + book._id}>\n                      <strong>\n                        {book.title} by {book.author}\n                      </strong>\n                    </a>\n                    <DeleteBtn onClick = {() => deleteBooks(book._id)}/>\n                  </ListItem>\n                ))}\n              </List>\n            ) : (\n              <h3>No Results to Display</h3>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\nexport default Books;\n"]},"metadata":{},"sourceType":"module"}