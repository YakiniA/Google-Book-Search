{"ast":null,"code":"import _slicedToArray from \"/Users/yakiniarumugakani/Documents/Homework/Google-Book-Search/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/yakiniarumugakani/Documents/Homework/Google-Book-Search/client/src/pages/Books.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\nimport SearchForm from \"../components/SearchForm\";\nimport { Container, Row, Col } from \"./components/Grid\";\nimport API from \"../utils/API\";\n\nfunction Books() {\n  // Initialize books as an empty array\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      books = _useState2[0],\n      setBooks = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      search = _useState4[0],\n      setSearch = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      results = _useState6[0],\n      setResults = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      error = _useState8[0],\n      setError = _useState8[1];\n\n  var searchTitle = useRef();\n  useEffect(() => {\n    loadBooks();\n  }, []);\n\n  var handleInputChange = event => {\n    var value = event.target.value;\n    setSearch(value);\n  };\n\n  var handleFormSubmit = event => {\n    event.preventDefault();\n    API.getBooks(search).then(res => {\n      if (res.data.status === \"error\") {\n        throw new Error(res.data);\n      }\n\n      setResults(res.data);\n    }).catch(err => setError({\n      error: err.message\n    }));\n  };\n\n  function loadBooks() {\n    // Add code here to get all books from the database and store them using setBooks\n    API.getBooks().then(response => {\n      setBooks(response.data);\n    });\n  }\n\n  function deleteBooks(id) {\n    // Add code here to get all books from the database and store them using setBooks\n    API.deleteBook(id).then(response => {\n      loadBooks();\n    });\n  }\n\n  function saveBook() {\n    // Add code here to get all books from the database and store them using setBooks\n    var bookData = {//  title : titleRef.current.value,\n      //  author : authorRef.current.value,\n      //  synopsis : synopsisRef.current.value\n    };\n    API.saveBook(bookData).then(response => {\n      setBooks(response.data);\n      alert();\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"s3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 15\n    }\n  }, \"Search for books\")), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: \"title\",\n    placeholder: \"Book Name (required)\",\n    value: search,\n    inputarea: searchTitle,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormBtn, {\n    onClick: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    size: \"md-6 sm-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, \"Books On My List\")), books.length ? /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, books.map(book => /*#__PURE__*/React.createElement(ListItem, {\n    key: book._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"/books/\" + book._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 23\n    }\n  }, book.title, \" by \", book.author)), /*#__PURE__*/React.createElement(DeleteBtn, {\n    onClick: () => deleteBooks(book._id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }\n  })))) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 15\n    }\n  }, \"No Results to Display\"))));\n}\n\nexport default Books;","map":{"version":3,"sources":["/Users/yakiniarumugakani/Documents/Homework/Google-Book-Search/client/src/pages/Books.js"],"names":["React","useState","useEffect","useRef","Jumbotron","DeleteBtn","List","ListItem","Input","TextArea","FormBtn","SearchForm","Container","Row","Col","API","Books","books","setBooks","search","setSearch","results","setResults","error","setError","searchTitle","loadBooks","handleInputChange","event","value","target","handleFormSubmit","preventDefault","getBooks","then","res","data","status","Error","catch","err","message","response","deleteBooks","id","deleteBook","saveBook","bookData","alert","length","map","book","_id","title","author"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\nimport SearchForm from \"../components/SearchForm\";\nimport { Container, Row, Col } from \"./components/Grid\";\nimport API from \"../utils/API\"\n\nfunction Books() {\n  // Initialize books as an empty array\n    const [books, setBooks] = useState([]);\n    const [search, setSearch] = useState([]);\n    const [results , setResults] = useState([]);\n    const [error , setError] = useState([]);\n    const searchTitle = useRef();\n    \n    useEffect(() => {\n      loadBooks();\n    }, []);\n\n   const handleInputChange = event => {\n     const { value } = event.target;\n     setSearch(value);\n    };\n\n    const handleFormSubmit = event => {\n      event.preventDefault();\n      API.getBooks(search)\n        .then(res => {\n          if (res.data.status === \"error\") {\n            throw new Error(res.data);\n          }\n         setResults(res.data);\n        })\n        .catch(err => setError({ error: err.message }));\n    };\n\n    function loadBooks() {\n      // Add code here to get all books from the database and store them using setBooks\n   \n      API.getBooks().then((response) => {\n        setBooks(response.data);\n      });\n  \n    }\n\n    function deleteBooks(id) {\n      // Add code here to get all books from the database and store them using setBooks\n   \n      API.deleteBook(id).then((response) => {\n        loadBooks();\n      });\n  \n    }\n\n    function saveBook() {\n      // Add code here to get all books from the database and store them using setBooks\n    const bookData = {\n        //  title : titleRef.current.value,\n        //  author : authorRef.current.value,\n        //  synopsis : synopsisRef.current.value\n    }\n      API.saveBook(bookData).then((response) => {\n        setBooks(response.data);\n       alert()\n      });\n  \n    }\n\n    return (\n      <Container fluid>\n        <Row>\n          <Col size=\"s3\">\n            <Jumbotron>\n              <h1>Search for books</h1>\n            </Jumbotron>\n             <form>\n              <Input name=\"title\" placeholder=\"Book Name (required)\" value={search} inputarea= {searchTitle}  onChange={handleInputChange}/>\n              <FormBtn onClick={handleFormSubmit} />\n            </form >\n\n          </Col>\n          <Col size=\"md-6 sm-12\">\n            <Jumbotron>\n              <h1>Books On My List</h1>\n            </Jumbotron>\n            {books.length ? (\n              <List>\n                {books.map(book => (\n                  <ListItem key={book._id}>\n                    <a href={\"/books/\" + book._id}>\n                      <strong>\n                        {book.title} by {book.author}\n                      </strong>\n                    </a>\n                    <DeleteBtn onClick = {() => deleteBooks(book._id)}/>\n                  </ListItem>\n                ))}\n              </List>\n            ) : (\n              <h3>No Results to Display</h3>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\nexport default Books;\n"]},"metadata":{},"sourceType":"module"}